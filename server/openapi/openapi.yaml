openapi: 3.1.0
info:
  title: ts-lens
  description: ts-lens
  version: 0.0.2
servers:
  - url: 'https://lens-api.k3l.io'
paths:
  /rankings:
    get:
      summary: List the current profile score ranking, highest score first
      description: |
        Returns the global ranking of profiles according to the given strategy.
        
        The result is paginated, using the `offset` and `limit` parameters.
      operationId: getRankings
      parameters:
        - $ref: "#/components/parameters/StrategyId"
          required: true
        - $ref: "#/components/parameters/PaginationOffset"
        - $ref: "#/components/parameters/PaginationLimit"
        - $ref: "#/components/parameters/Backdate"
      responses:
        200:
          description: Query succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Profile"
                description: |
                  The requested profiles, whose ranking is
                  in the `[limit, limit+offset)` range.
        400:
          $ref: "#/components/responses/HTTP400ErrorMessage"
        500:
          $ref: "#/components/responses/HTTP500ErrorMessage"
  /rankings_count:
    get:
      summary: Return the number of ranked users
      description: |
        Returns the number of profiles available for a given strategy.
        
        This can be used, for example, to display the number of pages
        on the paginated UI.
      operationId:
        getNumberOfRankings
      parameters:
        - $ref: "#/components/parameters/StrategyId"
          required: true
        - $ref: "#/components/parameters/Backdate"
      responses:
        200:
          description: Query succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: |
                      The number of ranking entries (with non-zero trust).
                required:
                  - count
        400:
          $ref: "#/components/responses/HTTP400ErrorMessage"
        500:
          $ref: "#/components/responses/HTTP500ErrorMessage"
  /ranking_index:
    get:
      summary: Return the ranking of the given user.
      description: |
        Retrieves a particular profile's position in relations to the population
      operationId: getRankingIndex
      parameters:
        - $ref: "#/components/parameters/StrategyId"
          required: true
        - $ref: "#/components/parameters/ProfileHandle"
          required: true
        - $ref: "#/components/parameters/Backdate"
      responses:
        200:
          description: Query succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  rank:
                    type: integer
                    description: Zero-based ranking of the user.
                required:
                  - rank
        400:
          $ref: "#/components/responses/HTTP400ErrorMessage"
        500:
          $ref: "#/components/responses/HTTP500ErrorMessage"
components:
  parameters:
    StrategyId:
      name: strategy_id
      in: query
      schema:
        type: integer
      description: The strategy ID of representing the pre-trust and local-trust EigenTrust heuristics.
    ProfileHandle:
      name: handle
      in: query
      schema:
        type: string
      description: The Lens profile handle (with or without the `.lens` extension).
    PaginationOffset:
      name: offset
      in: query
      schema:
        type: integer
      description: Return results starting from this offset position.  Defaults to start at `0`, the first result.
    PaginationLimit:
      name: limit
      in: query
      schema:
        type: integer
      description: Number of entries to return.  Defaults to `50`.
    Backdate:
      name: date
      in: query
      schema:
        type: string
      description: |
        A date, in `YYYY-MM-DD` format, for which to return the historic result.
        If absent, the request returns the current (most recent) result.
  responses:
    HTTP400ErrorMessage:
      description: |
        Invalid request, ex: wrong parameters.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
    HTTP500ErrorMessage:
      description: |
        Internal server error, not caused by issues with the request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
  schemas:
    ErrorMessage:
      description: A human-readable error message.
      type: string
    Profile:
      description: A user profile.
      type: object
      properties:
        id:
          type: integer
          description: Lens profile ID.
        handle:
          type: string
          description: Lens profile handle.
        followersCount:
          type: integer
          description: Number of followers.
        rank:
          type: integer
          description: Ranking of the user, zero-based.
      required:
        - id
        - handle
        - followersCount
      examples:
        - id: 12
          handle: lenster.lens
          followersCount: 38973
          rank: 11
        - id: 90724
          handle: ryanfox.lens
          followersCount: 813
